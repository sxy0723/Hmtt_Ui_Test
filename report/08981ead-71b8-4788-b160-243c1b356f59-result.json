{"name": "test_pub_ari[BJ23_TESTER_FCNB_{}-书法家极可能阿坎德-人工智能-新增文章成功]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: Failed to execute 'elementsFromPoint' on 'Document': The provided double value is non-finite.\n  (Session info: chrome=84.0.4147.105)", "trace": "self = <case.mp.test_pub_article.TestPubArticle object at 0x0000019446691EF0>, ari_title = 'BJ23_TESTER_FCNB_{}'\nari_context = '书法家极可能阿坎德', ari_channel = '人工智能', expect = '新增文章成功'\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.parametrize((\"ari_title\", \"ari_context\", \"ari_channel\", \"expect\"),\n                             get_case_data(\"./data/mp/test_pub_ari_data.json\"))\n    def test_pub_ari(self, ari_title, ari_context, ari_channel, expect):\n        # 2.组织测试数据\n        config.PUB_ARITCAL_TITLE = ari_title.format(time.strftime(\"%H%M%S\"))\n        logging.info(\"发布的文章标题{}\".format(config.PUB_ARITCAL_TITLE))\n        # 3.执行测试步骤\n        self.home_proxy.to_pub_ari_page()\n>       self.pub_ari_proxy.test_pub_article(config.PUB_ARITCAL_TITLE, ari_context, ari_channel)\n\ncase\\mp\\test_pub_article.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\mp\\publish_artical_page.py:105: in test_pub_article\n    self.pub_ari_handle.check_ari_channel(channel_name)\npage\\mp\\publish_artical_page.py:84: in check_ari_channel\n    check_channel_option(DriverUtils.get_mp_driver(), \"请选择\", channel_name)\nutils.py:159: in check_channel_option\n    action.move_to_element(option_element).send_keys(Keys.DOWN).perform()\nc:\\myprograms\\python\\lib\\site-packages\\selenium\\webdriver\\common\\action_chains.py:80: in perform\n    self.w3c_actions.perform()\nc:\\myprograms\\python\\lib\\site-packages\\selenium\\webdriver\\common\\actions\\action_builder.py:76: in perform\n    self.driver.execute(Command.W3C_ACTIONS, enc)\nc:\\myprograms\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000194466786A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Failed to execute \\'elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77937C24+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77937BF4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Failed to execute 'elementsFromPoint' on 'Document': The provided double value is non-finite.\nE         (Session info: chrome=84.0.4147.105)\n\nc:\\myprograms\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: JavascriptException"}, "attachments": [{"name": "log", "source": "5ac8700b-d5f1-4fa1-baba-9dd6e32591da-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "ari_title", "value": "'BJ23_TESTER_FCNB_{}'"}, {"name": "ari_context", "value": "'书法家极可能阿坎德'"}, {"name": "ari_channel", "value": "'人工智能'"}, {"name": "expect", "value": "'新增文章成功'"}], "start": 1598577612512, "stop": 1598577620680, "uuid": "b15031c7-60e6-4768-9405-c33ec654ed56", "historyId": "70b8430bbd0e8354cc499dd81e7c002e", "testCaseId": "da9d5282ad2d54e9281729e0fcf36315", "fullName": "case.mp.test_pub_article.TestPubArticle#test_pub_ari", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "case.mp"}, {"name": "suite", "value": "test_pub_article"}, {"name": "subSuite", "value": "TestPubArticle"}, {"name": "host", "value": "DESKTOP-9HIT7VU"}, {"name": "thread", "value": "4676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.mp.test_pub_article"}]}